/*build DAG
1 traverse DAG while add class to list
2 while traverse, check if there is cyle, if there is it is not possible
3 use post order to add class to list and later reverse for the result - why?
  1 -> 2 -> 4 -> 5
  1 -> 3 -> 4 -> 5
  if pre order it is 1 2 4 5 3, which is not right, should do 3 first before 4 5
  if post order it is 5 4 2 3 1, and then reverse it is 1 3 2 4 5, which is correct
4 use onPath[] to track if there is cycle for the path
5 use visited[] to make sure no duplicated traverse like 
  1 -> 2 -> 4 -> 5
  1 -> 3 -> 4 -> 5
  we want to 1 -> 2 -> 4 -> 5 then back to 3, then stop. we do not want to traverse 4, 5 twice
*/
// tc: e + v
// sc: e + v recursion stack + graph e + v, onpath e + v 
class Solution {
    boolean[] visited;
    boolean[] onPath; 
    boolean hasCycle;
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        List<Integer>[] graph = buildGraph(numCourses, prerequisites);
        visited = new boolean[numCourses];
        onPath = new boolean[numCourses];
        hasCycle = false;
        List<Integer> list = new ArrayList<>();
        for(int i = 0; i < numCourses; i++) {
            if(!visited[i]) {
                traverse(graph, list, visited, i);
                if(hasCycle) return new int[]{};
            }
        }
        
        Collections.reverse(list);
        
        return list.stream().mapToInt(i -> i).toArray();
    }
    
    private void traverse(List<Integer>[] graph, List<Integer> list, boolean[] visited, int v ) {
        if(onPath[v]) {
            hasCycle = true;
        }
        
        if(hasCycle || visited[v]) return;
        
        visited[v] = true;
        onPath[v] = true;
        for(int n: graph[v]) {
            traverse(graph, list, visited, n);
        }
        onPath[v] = false;
        list.add(v);
    }
    
    //build DAG
    private List<Integer>[] buildGraph(int num, int[][] prerequisites) {
        
        List<Integer>[] graph = new List[num];
        
        for(int i = 0; i < num; i++) {
            graph[i] = new ArrayList<Integer>();
        }
        
        for(int[] edge: prerequisites) {
            int from = edge[1];
            int to = edge[0];
            
            graph[from].add(to);
        }
        
        return graph;
    }
}