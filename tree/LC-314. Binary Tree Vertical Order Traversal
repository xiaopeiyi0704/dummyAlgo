// 1 traverse the tree - dfs or bfs start from the column 0
// 2 go left column - 1, go right column + 1
// 3 group all the nodes have same column value - TreeMap - we can use its order key for sorted output
// 4 output value based on ascending order of column value
// tc: traverse n nodes, each node need to add to treemap is logn, traverse map is n, total is nlogn + n
// sc: map is n, q is n
class Solution {
    public List<List<Integer>> verticalOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        
        if (root == null) return res;
            
        TreeMap<Integer, List<Integer>> map = new TreeMap<>(); // #3
        // #1 bfs traverse the tree
        Queue<Node> q = new LinkedList<>();
        q.add(new Node(0, root));
        while(!q.isEmpty()) {
            int size = q.size();
            
            for(int i = 0; i < size; i++) {
                Node node = q.poll();
                map.putIfAbsent(node.col, new ArrayList<>());
                map.get(node.col).add(node.node.val);
                
                if (node.node.left != null) q.add(new Node(node.col - 1, node.node.left)); // #2 go left column - 1
                if (node.node.right != null) q.add(new Node(node.col + 1, node.node.right)); //#2 go right column + 1
            }
        }
        
        // #4
        for(Map.Entry<Integer, List<Integer>> pair : map.entrySet()) {
            res.add(pair.getValue());
        }
        
        return res;
    }
}

class Node {
    int col;
    TreeNode node;
    
    public Node(int col, TreeNode node) {
        this.col = col;
        this.node = node;
    }
}