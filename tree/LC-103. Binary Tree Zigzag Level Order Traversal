// bfs + deque
// tc: n
// sc: n
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        
        List<List<Integer>> res = new ArrayList<>();
        if(root == null) return res;
        
        boolean left = true; // start from left to right
        Deque<TreeNode> deque = new LinkedList<>();
        deque.add(root);
        
        while(!deque.isEmpty()) {
            int size = deque.size();
            List<Integer> list = new ArrayList<>();
            
            for(int i = 0; i < size; i++) {
                // left to right,read first. right to left, read last
                TreeNode cur = left == true ? deque.removeFirst() : deque.removeLast();
                list.add(cur.val);
                if(left) { 
                    if(cur.left != null) {
                        deque.addLast(cur.left);
                    }
                    if(cur.right != null) {
                        deque.addLast(cur.right);
                    }

                } else {
                    if(cur.right != null) {
                        deque.addFirst(cur.right);
                    }
                    if(cur.left != null) {
                        deque.addFirst(cur.left);
                    }
                }
            }
            left = !left;
            res.add(list);
        }
        
        return res;
    }
}

/*
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> list = new LinkedList<>();
        if(root == null){
            return list;
        }
        
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        boolean even = true;
        
        while(!q.isEmpty()){
            int n = q.size();
            LinkedList<Integer> subList = new LinkedList<>();
            
            for(int i = 0; i < n; i++){
                TreeNode top = q.poll();
                
                if(top.left != null){
                    q.add(top.left);
                }
                if(top.right != null){
                    q.add(top.right);
                }
                if(even)
                    subList.add(top.val);
                else
                    subList.addFirst(top.val);
            }
            list.add(subList);
            even = !even;
        }
        
        return list;
    }
}
*/
