// #1 inorder traverse to get almost sorted list
// #2 traverse the list find the two elements that need to be swapped
//     - if prev element > current element, then prev and current COULD be swapped. But also could be NOT - why.
//     - e.g 1,2,3, in the list 2,1,3. prev 2 > cur 1, so swap 2 and 1
//     - e.g 2,3,1, in the list 3,2,1. prev 3 > cur 2, but need to keep check, pre 2 > cur 1 as well. swap 3 and 1 is correct answer
//     - so, once find invalid pair, prev is the one must be wrong, but cur may or may not be the wrong one. need to keep check, if there is another wrong one, then
//       swap prev and another one.
// tc: n traverse tree, n traverse list
// sc: n list, n indorder recursion call stack
class Solution {
    public void recoverTree(TreeNode root) {
        List<TreeNode> list = new ArrayList();
        // #1 inorder traverse to get almost sorted list
        inorder(root, list);
        TreeNode x = null;
        TreeNode y = null;
        
        // #2 traverse the list find the two elements that need to be swapped
        TreeNode prev = list.get(0);
        for(int i = 1; i < list.size(); i++) {
            if(prev.val > list.get(i).val) {
                y = list.get(i); // once find invalid pair, cur may or may not be the wrong one. At this mo, we write cur one down. If later see another wrong one, y will be replaced.
                if(x == null) {
                    x = prev; // once find invalid pair, prev is the one must be wrong. x is only written down once.
                } else {
                    break;
                }
            }
            prev = list.get(i); //but cur may or may not be the wrong one. need to keep check, check if if there is another wrong one.
        }
        
        int temp = x.val;
        x.val = y.val;
        y.val = temp;
    }
    
    public void inorder(TreeNode root, List<TreeNode> list) {
        if (root == null) return;
        inorder(root.left, list);
        list.add(root);
        inorder(root.right, list);
    }
}

/*
// similar as above just everything happens in inorder traverse
// tc: n indorder traverse
// sc: n indorder recursion call stack
class Solution {
    TreeNode x;
    TreeNode y;
    TreeNode prev;
    public void recoverTree(TreeNode root) {
     
        traverse(root);
        int temp = x.val;
        x.val = y.val;
        y.val = temp;
    }
    
    private void traverse(TreeNode root) {
         if (root == null) return;
        
        traverse(root.left);
        
        if (prev != null && prev.val > root.val) {  
            y = root;
            if (x == null) {
                x = prev;
            } else {
                return;
            }
        }
        
        prev = root;
        
        traverse(root.right);
    }
}
*/