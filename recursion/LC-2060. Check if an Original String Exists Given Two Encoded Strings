// two pointers run on each string
// can be both letters
// can be both digit - if both digit, then can be different length(up to 3 digits), or can be different value e.g 12, 24, then the greater one get "wild card"
// one letter one digit - the digit one if more than 1, then it contains wild card

// we need a diff to track the wild card for both string, diff < 0, s2 gets wild card, diff > 0 s1 gets wild card
// when one or both of the string meet digit, we need to check all the length combination (<=3)
class Solution {
    Map<String, Boolean> mem = new HashMap<>();
    public boolean possiblyEquals(String s1, String s2) {
        
        return isPossible(s1, s2, 0, 0, 0);
    }
    
    private boolean isPossible(String s1, String s2, int index1, int index2, int diff) {
        if(index1 == s1.length() && index2 == s2.length() && diff == 0) return true;
        
        if(diff == 0 && (index1 == s1.length() || index2 == s2.length())) return false;
        
        if(diff < 0  && index1 == s1.length()) return false;
        
        if(diff > 0 && index2 == s2.length()) return false;
        
        String key = index1 + "-" + index2 + "-" + diff;
        if (mem.containsKey(key)) {
            return mem.get(key);
        }
        
        if(diff == 0) {
            char ch1 = s1.charAt(index1);
            char ch2 = s2.charAt(index2);
            
            if(Character.isDigit(ch1) && Character.isDigit(ch2)) {
                int end1 = getDigitEndIndex(s1, index1);
                int end2 = getDigitEndIndex(s2, index2);
                Set<Integer> set1 = getAllPossibleNum(s1, index1, end1);
                Set<Integer> set2 = getAllPossibleNum(s2, index2, end2);
                boolean res = false;
                for(Integer val1 : set1) {
                    for(Integer val2: set2) {
                        res = isPossible(s1, s2, end1, end2, val1 - val2);
                        if(res) {
                            mem.put(key, true);
                            return true;
                        }
                    }
                }
            } else if(Character.isDigit(ch1)) {
                 int end1 = getDigitEndIndex(s1, index1);
                 Set<Integer> set1 = getAllPossibleNum(s1, index1, end1);
                 boolean res = false;
                 for(Integer val1 : set1) {
                    res = isPossible(s1, s2, end1, index2 + 1, val1 - 1);
                    if(res) {
                        mem.put(key, true);
                        return true;
                    }
                 }
            } else if(Character.isDigit(ch2)) {
                 int end2 = getDigitEndIndex(s2, index2);
                 Set<Integer> set2 = getAllPossibleNum(s2, index2, end2);
                 boolean res = false;
                 for(Integer val2 : set2) {
                    res = isPossible(s1, s2, index1 + 1, end2, 1 - val2);
                    if(res){
                        mem.put(key, true);
                        return true;
                    }
                 }
            } else{
                if(ch1 == ch2) {
                    boolean res = isPossible(s1, s2, index1 + 1, index2 + 1, 0);
                    mem.put(key, res);
                    return res;
                } 
            }
        } else if(diff < 0) {
            char ch1 = s1.charAt(index1);
            if(!Character.isDigit(ch1)) {
                boolean res = isPossible(s1, s2, index1 + 1, index2, diff + 1);
                mem.put(key, res);
                return res;
            } else{
               int end1 = getDigitEndIndex(s1, index1);
                 Set<Integer> set1 = getAllPossibleNum(s1, index1, end1);
                 boolean res = false;
                 for(Integer val1 : set1) {
                    res = isPossible(s1, s2, end1, index2, diff + val1);
                    if(res) {
                        mem.put(key, true);
                        return true;
                    }
                 }
            }
        } else{
            char ch2 = s2.charAt(index2);
            if(!Character.isDigit(ch2)) {
                boolean res = isPossible(s1, s2, index1, index2 + 1, diff - 1);
                mem.put(key, res);
                return res;
            } else{
                int end2 = getDigitEndIndex(s2, index2);
                Set<Integer> set2 = getAllPossibleNum(s2, index2, end2);
                boolean res = false;
                for(Integer val2 : set2) {
                    res = isPossible(s1, s2, index1, end2, diff - val2);
                    if(res) {
                        mem.put(key, true);
                        return true;
                    }
                }
            }
        }
        mem.put(key, false);
        return false;
    }
    
    private int getDigitEndIndex(String s, int start) {
        int count = 0;
        for(int i = start; i < s.length(); i++) {
            if(Character.isDigit(s.charAt(i))) {
                count++;
            } else{
                break;
            }
            if(count == 3) break;
        }
        return start + count;
    }
    
    private Set<Integer> getAllPossibleNum(String s, int start, int end) {
        Set<Integer> set = new HashSet<>();
        String strVal = s.substring(start, end);
        set.add(Integer.parseInt(strVal));
   
        if(strVal.length() == 2) {
            set.add((strVal.charAt(0)-'0') + (strVal.charAt(1)- '0'));
        } else if(strVal.length() == 3) {
            set.add((strVal.charAt(0)-'0') + (strVal.charAt(1)- '0') + (strVal.charAt(2)- '0'));
            set.add((strVal.charAt(0)-'0') + (strVal.charAt(1)- '0')*10 + (strVal.charAt(2)- '0'));
            set.add((strVal.charAt(0)-'0')*10 + (strVal.charAt(1)- '0') + (strVal.charAt(2)- '0'));
        }
        
        return set;
    }
}















