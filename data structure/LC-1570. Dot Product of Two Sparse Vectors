/*observation
1 what we exactly want? - multiply the two elements have same index from the two array and sum the product value up
2 we can ignore the 0 value in the array
3 use a map to write down the index with non 0 value
4 when dotProduct, no need to traverse the whole original array, just process the element in map(with non 0 value)
*/
// tc: n
// sc: n
class SparseVector {
    Map<Integer, Integer> indexToValue;
    SparseVector(int[] nums) {
        indexToValue = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] != 0) {
                indexToValue.put(i, nums[i]);
            }
        }
    }
    
	// Return the dotProduct of two sparse vectors
    public int dotProduct(SparseVector vec) {
        int total = 0;
        // here can do OPTIMIZATION, choose the map that has shorter length(this.indexToValue.size() vs vec.indexToValue.size()) to loop
        // but the whole tc wont change
        for (Map.Entry<Integer, Integer> pair : indexToValue.entrySet()) {
            int key = pair.getKey();
            int value = pair.getValue();
            
            if (vec.indexToValue.containsKey(key)) {
                total+= value * vec.indexToValue.get(key);
            }
        }
        
        return total;
    }
}
