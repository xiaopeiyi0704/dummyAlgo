//valid tree - only one group, and not cycle
//Solution1 DFS - traverse it and maintain a visited[], if all the nodes are visited then it is one group.
//              - during the traverse track if there is cycle based on onPath[]("backtack"), if a node is onpath twice then cycle
//Solution2 Union Find
//tc: initialize parent v, traverse edges[] e + v, union/isconnected is O(1) each call, total v + e + v
class Solution {
    public boolean validTree(int n, int[][] edges) {
        int[] parent = new int[n];
        for(int i = 0; i < parent.length; i++) {
            parent[i] = i;
        }
        int group = n;
        
        for(int[] edge: edges) {
            int from = edge[0];
            int to = edge[1];
            
            if(!isConnected(from, to, parent)) {
                union(from, to, parent);
                group--;
            } else{
                return false;
            }
        }
        
        
        return group == 1;
    }
    
    private boolean isConnected(int a, int b, int[] parent) {
        int rootA = find(a, parent);
        int rootB = find(b, parent);
        
        return rootA == rootB;
    }
    
    private void union(int a, int b, int[] parent) {
        int rootA = find(a, parent);
        int rootB = find(b, parent);
        
        if(rootA != rootB) parent[rootB] = rootA;
    }
    
    private int find(int a, int[] parent) {
        if(a != parent[a]) {
            parent[a] = find(parent[a], parent);
        }
        
        return parent[a];
    }
}