//typical MST question - connect all the nodes use min weight/effort
//Krustra MST solution
//tc: array sort nlogn, union find e + v
class Solution {
    public int minimumCost(int n, int[][] connections) {
        
        Arrays.sort(connections, (a, b) -> a[2] - b[2]);
        
        int[] parent = new int[n];
        for(int i = 0; i < parent.length; i++) {
            parent[i] = i;
        }
        
        int group = n;
        int total = 0;
        
        for(int[] edge: connections) {
            int from = edge[0] - 1;
            int to = edge[1] - 1;
            int cost = edge[2];
            
            if(!isConnected(from, to, parent)) {
                union(from, to, parent);
                group--;
                total+= cost;
            }
        }
        
        if(group > 1) return -1;
        
        return total;
    }
    
    private boolean isConnected(int a, int b, int[] parent) {
        int rootA = find(a, parent);
        int rootB = find(b, parent);
        
        return rootA == rootB;
    }
    
    private void union(int a, int b, int[] parent) {
        int rootA = find(a, parent);
        int rootB = find(b, parent);
        
        if(rootA != rootB) {
            parent[rootB] = rootA;
        }
    }
    
    private int find(int a, int[] parent) {
        if(a != parent[a]) {
            parent[a] = find(parent[a], parent);
        }
        
        return parent[a];
    }
}