
class Solution {
    public Node insert(Node head, int insertVal) {
        //if empty list
        if(head == null) {
            Node newNode = new Node(insertVal);
            newNode.next = newNode;
            return newNode;
        }
        
        Node prev = head;
        Node cur = head.next;
        
        do{
            if(prev.val <= insertVal && cur.val >= insertVal) {
                Node newNode = new Node(insertVal);
                newNode.next = cur;
                prev.next = newNode;
                break;
            } else if (prev.val > cur.val) {
                if(prev.val <= insertVal || insertVal <= cur.val) {
                    Node newNode = new Node(insertVal);
                    newNode.next = cur;
                    prev.next = newNode;
                    break;
                }
            }
            
            prev = prev.next;
            cur = cur.next;
        } while( prev != head);
        
        // e.g [1], 0 
        // e.g [3,3,3] 0
        Node newNode = new Node(insertVal);
        newNode.next = cur;
        prev.next = newNode;
        
        return head;
    }
}

/*
class Solution {
    public Node insert(Node head, int insertVal) {
        //if empty list
        if(head == null) {
            Node newNode = new Node(insertVal);
            newNode.next = newNode;
            return newNode;
        }
        
        //find right position to insert - build a sorted list to search the right position to insert
        //to build the list, find the min node
        
        Node ptr = head;
        Node max = ptr;
        ptr = ptr.next;
        
        while(ptr != head) {
            if(ptr.val < max.val) break;
            
            max = ptr;
            ptr = ptr.next;
        }
        
        List<Node> list = new ArrayList<>();
        Node minNode = ptr;
        list.add(minNode);
        ptr = ptr.next;
        
        while(ptr != minNode) {
            list.add(ptr);
            ptr = ptr.next;
        }
        
        Node insertPosition = getInsertPosition(list, insertVal);
        
        // should insert as 1st node
        if(insertPosition == null) {
            insertPosition = list.get(list.size() - 1);
        }
        
        Node newNode = new Node(insertVal);
        newNode.next = insertPosition.next;
        insertPosition.next = newNode;
        
        return head;
    }
    
    private Node getInsertPosition(List<Node> list, int target) {
        int left = 0;
        int right = list.size() - 1;
        Node res = null;
        while(left <= right) {
            int mid = left + (right - left) / 2;
            
            if(list.get(mid).val <= target) {
                res = list.get(mid);
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        
        return res;
    }
}



*/