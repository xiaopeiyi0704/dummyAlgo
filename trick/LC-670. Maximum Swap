/* This is from discuss solution
The most efficient swap for this will always be the left most smallest index swapped with the right most greatest index. So we will check the same in the array.

Approach
Iterate the array from back and see the righmost greates element for each element in the array.
For example:
2736
Right most greatest for 6 is 6(index 3).
Right most greatest for 3 is 6(index 3).
Right most greatest for 7 is 7(index 1).
Right most greatest for 2 is 7(index 1).
Now we store all these indexes in our maxRightIndex array which will be
maxRightIndex = 1 1 3 3
To swap the element we iterate the array from left and see the first left index which has right most greatest element other than itself and swap it.

Complexity
Time complexity: O(n)
Space complexity: O(n)
*/
class Solution {
    public int maximumSwap(int num) {
        char[] arr = String.valueOf(num).toCharArray();
        int n=arr.length;
        int[] maxRightIndex = new int[n];
        maxRightIndex[n-1]=n-1;
        for(int i=n-2;i>=0;i--){
            if(arr[i]>arr[maxRightIndex[i+1]]){
                maxRightIndex[i]=i;
            }else{
                maxRightIndex[i]=maxRightIndex[i+1];
            }
        }
        for(int i=0;i<n;i++){
            if(arr[maxRightIndex[i]]!=arr[i]){
                char temp = arr[i];
                arr[i]=arr[maxRightIndex[i]];
                arr[maxRightIndex[i]]=temp;
                break;
            }
        }
        String text = String.valueOf(arr);
        return Integer.parseInt(text);
    }
}

/*observation
  find the position need to be replaced - how? - the value in current leftmost position is not the biggest available number
  what is current leftmost position? - from left to right, the 1st number not meet the requirement(requirement - leftmost should be the biggest in all available number).
  what is biggest available number? - the largest number you can use at the moment. 
  e.g 9237. 
  current leftmost position is 0, current largest available number is 9. But in current leftmost position is already current largest available number, so we are good.
  next left most position is 1, current largest availabe number is 7. But in current leftmost poistion is 3, we can swap to make it bigger. So the replace position is 1.
1 use a treemap to group value with a list of index (different index may have same value)
  why use treemap, it maitains key's order - then it is easier for us to get current largest available number(lastKey())

2 we traverse the string from left to right, to make sure to find the replaced position at leftmost.
3 if we find a number it is not current larget number, then we need to replace it with the current largest number.
4 what if there is multi current larget number e.g 3888, which 8 we should use? - use the rightmost one since it gives the largest result
5 what if current leftmost position number is the current available largest? - remove it to make it NOT available anymore. if the whole list of the map key becomes not       available then remove the key from the map for same reason(they are not available for swap anymore, they are all in right position)

class Solution {
    public int maximumSwap(int num) {
        
        String str = String.valueOf(num);
        TreeMap<Integer, List<Integer>> map = new TreeMap<>();
        
        StringBuilder sb = new StringBuilder();
        // #1
        for (int i = 0; i < str.length(); i++) {
            
            int val = (int)str.charAt(i) - '0';
            
            map.putIfAbsent(val, new ArrayList<Integer>()); // #1
            map.get(val).add(i);
            
            sb.append(val);
        }
        
        // #2
        for (int i = 0; i < sb.length(); i++) {
            List<Integer> list = map.get(map.lastKey()); // get current largest available number(lastKey())
            // #3
            // if current largest available number is NOT at current position, then SWAP it
              if (getRemoveIndex(list, i) == -1) { // here use binary search may be faster than use contains(value) from n to logn
                int pos = list.get(list.size() - 1); // #4 if there is multi current larget number, use the rightmost one since it gives the largest result
                char temp = sb.charAt(pos);
                sb.setCharAt(pos, sb.charAt(i));
                sb.setCharAt(i, temp);
                break; // one swap once, so break and return
            } else {
                // #5
                // if current largest available number is at current position, then make it not avaialble anymore - delete it from available list
                list.remove(getRemoveIndex(list, i)); // here use binary search may be faster then remove(Integer.valueOf(value))from n to logn
                if (list.size() == 0) map.remove(map.lastKey());
            }
        }
        
        return Integer.parseInt(sb.toString());
    }
    
    private int getRemoveIndex(List<Integer> list, int target) {
        int left = 0;
        int right = list.size() - 1;
        int res = -1;
        
        while (left <= right) {
            int mid = left + (right - left) / 2;
            
            if (list.get(mid) < target) {
                left = mid + 1;
            } else if (list.get(mid) > target) {
                right = mid - 1;
            } else {
                res = mid;
                return res;
            }
        }
        return res;
    }
}
*/