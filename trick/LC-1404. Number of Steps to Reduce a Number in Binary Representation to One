// In binary divide 2 means shift right
// In binary decide if even or odd depends on the most right digit if 1
// if even, need one operation -> divide 2
// if odd, need two operations -> +1 and divide 2
// e.g 1101
// 1 1101 most right is 1 it is odd, -> add 1, after add one, current bit becomes 0, and generate carry(1)(used to move to index - 1)
//   divide 2 become 110 and carry 1
// 2 110 most right is 0, it is even, but there is 1 in carry, which makes current bit is 1. so it is still a odd -> add 1, generate carry(1), and after add one, current digit becomes 0,  and generate carry(1)(used to move to index - 1)
//   divide 2 become 11 and carry 1
// 3 11 most right is 1 it is odd, but there is 1 in carry, which makes current is 0, it is even now(current bit becomes 0), so it is even -> since add the carry current bit becomes 0, also generate carry, so carry is still 1(used to move to index - 1)
//   divide 2 bcome 1. at this moment, carry is 1
// NOTE* There is no need to consider s[0] in this case since we know that s[0] must be 1 based on the problem constraints and we only need to apply moves such that the number is reduced to 1.

class Solution {
    public int numSteps(String s) {
        int count = 0;
        int carry = 0;
        
        for(int i = s.length() - 1; i >= 1; i--) {
            int num = s.charAt(i) - '0';
            
            // most right is 0 and carry is 0 so ->even - one operation
            if(num == 0 && carry == 0) {
                count++;
            } else if(num == 1 && carry == 1) { // most right is 1 and carry is 1 so *1 + 1 ->even - one operation
                count++;
                carry = 1; // carry is used so becomes 0
            } else { // else is about num is 0 and carry is 1. most right is 0(even), but carry is 1 even + 1 ->odd - two operations
                count+= 2;
                carry = 1; // carry is used so becomes 0
            }
        }
        
        // now we are at 1st digit in s, and we know 1st digit in s is 1 -> our goal is here. 
        // but if at this moment, if carry is 1, then total is 2 now. we need one more divide operation.(if carry is 0, then no need)
        
        if(carry == 1) count++;
        
        return count;
    }
}