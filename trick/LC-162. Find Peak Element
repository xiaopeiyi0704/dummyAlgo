/*observation
This question has three very importance pieces of information
1 nums[i] > nums[i - 1] and nums[i] > nums[i + 1] - as long as nums[0] > nums[1] or nums[length - 1] > nums[length - 2] then nums[0] or nums[length - 1] is peak
2 nums[i] != nums[i + 1] for all valid i - adjacent two elements cannot be same
3 You must write an algorithm that runs in O(log n) time - binery search -

how to use binery search? - #1 and #2 make binery search workable
if mid > mid + 1 means mid can be the peak or peak at left side
if mid < mid + 1, means mid + 1 can be the peak or peak at right side
e.g [1,2,1,2,3,4]
         m   m m
return index 5, which is value 4 (index 1, value 2 also an answer)
*/
class Solution {
    public int findPeakElement(int[] nums) {
        int left = 0;
        int right = nums.length - 1;
        int res = -1;
        
        while (left < right) {
            int mid = left + (right - left) / 2;
            
            if (mid + 1 <= nums.length - 1 && nums[mid] > nums[mid + 1]) {
                res = mid;
                right = mid - 1;
            } else {
                res = mid == nums.length - 1 ? mid : mid + 1;
                left = mid + 1;
            }
        }
        
        return res;
    }
}