// #1 traverse from right to left and keep monotonic decrease order (index in the queue/deque/stack)
//      -why? all items finally in deque are "peak" - from peak to its right MAY be a partition.
//       e.g 528799 -> 5 8 9 9, index are 0 2 4 5. (index)from 5 to 5 is a partition, 4 to 4 is a partition, 2 to 3 MAY be a partition, 0 to 1 MAY be a partition
// #2 traverse from right to left and get min value(minFromRight) when at that index
//      -why? at #1 we get POTENTIAL partitions. But I stated MAY BE, still not sure. We need to check.
//       e.g 4528799 -> 4 5 8 9 9, index are 0 1 3 5 6. 
//       (index)from 6 to 6 is a partition, 
//       (index)5 to 5 is a partition, 
//       (index)from 3 to 4 is a partition - because we check and know at minFromRight[3] is 7, greater than arr[1] 5(value at index 1). So from 3 to 4 CAN be a partition
//       (index)from 1 to 2 can NOT be a partition - because minFromRight[1] is 2, less than arr[0] 4, if less than it, this interval itself can not be a partition 
//       (index)from 0 to 2 is a partition since it reachs to the end(first element in the array)
// tc: n
// sc: n 
class Solution {
    public int maxChunksToSorted(int[] arr) {
        // #1 traverse from right to left and keep monotonic decrease order (index in the queue/deque/stack)
        Deque<Integer> deque = new LinkedList<>();
        
        for(int i = arr.length - 1; i >= 0; i--) {
            while(deque.size() > 0 && arr[deque.getLast()] < arr[i]) {
                deque.removeLast();
            }
            
            deque.add(i);
        }
        
        // #2 traverse from right to left and get min value(minFromRight) when at that index
        int[] minFromRight = new int[arr.length];
        int min = arr[arr.length - 1];
        minFromRight[arr.length - 1] = arr[arr.length - 1];
        for(int i = arr.length - 2; i >= 0; i--) {
            min = Math.min(min, arr[i]);
            minFromRight[i] = min;
        }
        
        
        int count = 0;
        while(deque.size() > 0) {
            int index = deque.removeFirst();
            if(minFromRight[index] == arr[index]) { // if itself is the min value from the right(sorted), then itself is a partion
                count++;
            } // check current min if greater than "next" item in the deque, if yes, current does not involve with rest items in the deque anymore and can be split from current to be a partition
            else if(minFromRight[index] < arr[index] && (deque.size() > 0 && minFromRight[index] >= arr[deque.getFirst()])) {
                count++;
            } else if(deque.size() == 0) { // reachs to the end(first element in the array)
                count++;
            }
        }
        
        return count;
    }
}

/* test cases
//431528799
deque
0 3 5 7 8 
4 5 8 9 9       
       
minFromRight:  1 1 1 2 2 7 7 9 9
arr 		:  4 3 1 5 2 8 7 9 9
index       :  0 1 2 3 4 5 6 7 8 

//321
minFromRight:  1 1 1
arr 		:  3 2 1
index       :  0 1 2

//0,3,0,3,2	
deque
1 3
3 3

minFromRight:  0 0 0 2 2
arr 		:  0 3 0 3 2
index       :  0 1 2 3 4
*/