// use map to track all the index/position for the occurance of a word
// for each shortest search - use two pointers to get min distance
// tc: m + n
// sc: n
class WordDistance {
    Map<String, List<Integer>> wordToIndex;
    public WordDistance(String[] wordsDict) {
        wordToIndex = new HashMap<>();
        // traverse word array and build the map, key is word, value is a list contains all occurance indexes
        for(int i = 0; i < wordsDict.length; i++) {
            wordToIndex.putIfAbsent(wordsDict[i], new ArrayList<>());
            wordToIndex.get(wordsDict[i]).add(i);
        }
    }
    
    public int shortest(String word1, String word2) {
        int min = Integer.MAX_VALUE;
        int index1 = 0;
        int index2 = 0;
        List<Integer> list1 = wordToIndex.get(word1);
        List<Integer> list2 = wordToIndex.get(word2);
        
        while(index1 < list1.size() && index2 < list2.size()) {
            int dis = list1.get(index1) - list2.get(index2);
            min = Math.min(Math.abs(dis), min);
            // if dis < 0 means word1 appear earlier then word2, so we can try next index of word1 to check if the dis is shorter
            if(dis < 0) {
                index1++;
            } else {
                index2++;
            }
        }
        
        return min;
    }
}