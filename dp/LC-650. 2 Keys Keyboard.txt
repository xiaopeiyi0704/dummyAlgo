//DP - top down - dfs + memo
//tc: n^2
//sc: memo n^2 + recursion stack n
class Solution {
    Integer[][] memo;
    public int minSteps(int n) {
        memo = new Integer[n + 1][n + 1];
        
        return copyPaste(1, 0, n);
    }
    
    private int copyPaste(int cur, int buffer, int target) {
        if(cur == target) return 0;
        if(cur > target) return Integer.MAX_VALUE;
        
        if(memo[cur][buffer] != null) return memo[cur][buffer];
        int paste = Integer.MAX_VALUE;
        
        if(buffer > 0) { //only paste when buffer has something, otherwise no reason to do it
            paste = copyPaste(cur + buffer, buffer, target); //paste, cur + buffer, buffer itsel no change
        }
        if(paste != Integer.MAX_VALUE){
            paste+= 1;
        }
        
        int copyPaste = Integer.MAX_VALUE;
        copyPaste = copyPaste(cur + cur, cur, target); //this is copy and paste two ations, copy cur, and paste cur, then cur = cur + cur, buffer is what you copied is cur
        if(copyPaste != Integer.MAX_VALUE){
            copyPaste+= 2; //why + 2, copy and paste must happen together, if only copy, not meaningful - keep copy never paste, then no change - stackoverflow
        }
        
        return memo[cur][buffer] = Math.min(copyPaste, paste);
    }
}