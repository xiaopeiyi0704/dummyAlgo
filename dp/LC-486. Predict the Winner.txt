// dp top down - recursion + memo
// this is very important - "assume that both players are playing optimally" - that means player2 will pick the best one for win
// for each step, player1 either take the left one or right one - pick the better one - Math.max(takeLeft, takeRight)
// tc: n^2
// sc: n^2 memo + n recursion call stack + n get total + n^2 initialize memo = n^2
class Solution {
    int[][] memo;
    public boolean predictTheWinner(int[] nums) {
        memo = new int[nums.length][nums.length];
        int total = 0;
        for(int num: nums) {
            total+= num;
        }
        for(int[] row: memo) {
            Arrays.fill(row, -1);
        }
        
        
        int player1 = dfs(nums, 0, nums.length - 1);
        
        // need to think about when total is even or odd, if odd e.g total 5, player1 is 2. player1 should get 3 to win, but 5 / 2  = 2.
        // so if total is odd, make total even by add 1, which to reach the "upper bound" (let 5 / 2 = 3 instead of 2)
        return total % 2 == 0 ? player1 >= total / 2 : player1 >= total / 2 + 1; 
    }
    
    private int dfs(int[] nums, int left, int right) {
        if(left > right) return 0;
        
        if(memo[left][right] != -1) return memo[left][right];
        
        //player2 will pick the best one for win, so he will leave which less to me, so have to use Math.min
        int takeLeft = nums[left] + Math.min(dfs(nums, left + 2, right), dfs(nums, left + 1, right - 1)); 
        //player2 will pick the best one for win, so he will leave which less to me, so have to use Math.min
        int takeRight = nums[right] + Math.min(dfs(nums, left + 1, right - 1), dfs(nums, left, right - 2));
        
        //but player1 will pick the best option from the two options
        return memo[left][right] = Math.max(takeLeft, takeRight);
    }
}