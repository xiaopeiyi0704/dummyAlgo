/*observation
1 from a 0 value cell, and try to reach all 1, which has min sum steps - BFS
2 no 0 at all - return -1
3 there is 0, but cannot reach all 1 - return -1 - count all 1, and check number of 1 is visited
4 4 directions traval - need to mark visited for visited cell to avoid duplicate
5 value 1 cell also need to be marked visited if it is visited, since value 1 cell cannot be multiple visited, otherwise #3 count will be mess up
*/
//tc: mn + mn* mn (traverse mn times grid - mn)
//sc: visited mn, create mn times, total is mn^2
class Solution {
    int[][] dxy = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
    public int shortestDistance(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int res = Integer.MAX_VALUE;
        int buildingCount = 0;
        
        // #3 count how many 1 value cells
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) buildingCount++;
            }
        }
        
        // #1 try all possible empty land - 0 value cell, and check its travel distance to all 1 value cell
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 0) {
                    int total = bfs(grid, i, j, buildingCount, m, n);
                    if (total != -1) { // -1 means from this 0 cell, cannot reach all the 1
                        res = Math.min(res, total); // if it can reah all 1, then get min value
                    }
                }
            }
        }
        
        return res == Integer.MAX_VALUE ? -1 : res; // res == Integer.MAX_VALUE means either not all 1 can be reached from every 0 cell or there is no 0 cell
    }
    
    private int bfs(int[][] grid, int row, int col, int buildingCount, int m, int n) {
        boolean[][] visited = new boolean[m][n];
        int total = 0; // for calculate total distance start from current row/col 0 value cell
        int step = 0; // travel step
        Queue<int[]> q = new LinkedList<>();
        q.add(new int[]{row, col});
        visited[row][col] = true; // #4 
        
        while(!q.isEmpty()) {
            int size = q.size(); // q contains number of 0 or 1 cell can be reached in one/prev step
            
            for (int i = 0; i < size; i++) {
                int[] xy = q.poll();
                
                if (grid[xy[0]][xy[1]] == 1) { // reach 1 cell
                    total+= step; // add the steps from start point to here
                    buildingCount--; // remaining building/1 to reach
                    if (buildingCount == 0) return total; // if reached all 1, then return, no need to going forward
                    continue; // if 1 cell, it is not accessible, and cannot get adjacent 4 cells from it
                }
                
                for (int d = 0; d < dxy.length; d++) { // #4
                    int x = xy[0] + dxy[d][0];
                    int y = xy[1] + dxy[d][1];
                    if (x >= 0 && x < m && y >= 0 && y < n && (grid[x][y] == 0 || grid[x][y] == 1) && !visited[x][y]) { // also need to get 1 value cell, since we want to reach it
                        visited[x][y] = true; // #4 #5
                        q.add(new int[]{x, y});
                    }
                }
            }
            step++; // go to next step
        }
        
        return -1; // #2 cannot reach all 1 
        
    }
}