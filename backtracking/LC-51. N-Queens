class Solution {
    List<List<String>> res;
    public List<List<String>> solveNQueens(int n) {
        res = new ArrayList<>();
        //build board
        char[][] board = new char[n][n];
        for(char[] row: board) {
            Arrays.fill(row, '.');
        }
        
        solve(board, 0);
        
        return res;
    }
    
    private void solve(char[][] board, int row) {
        if(row == board.length) {
            List<String> list = new ArrayList<>();
            for(char[] charArr: board) {
                String str = String.valueOf(charArr);
                list.add(str);
            }
            res.add(list);
            
            return;
        }
        
        for(int i = 0; i < board.length; i++) {
            if(isValid(board, row, i)) {
                board[row][i] = 'Q';
                solve(board, row + 1);
                board[row][i] = '.';
            }
        }
    }
    
    private boolean isValid(char[][] board, int row, int col) {
        
        for(int i = 0; i < row; i++) {
            for(int j = 0; j < board.length; j++) {
                if (board[i][j] == 'Q' && (j == col || Math.abs(i - row) == Math.abs(j - col))) return false;
            }
        }
        
        return true;
    }
}