class Solution {
    List<String> res = new ArrayList<>();
    TrieNode root = new TrieNode();
    public List<String> findWords(char[][] board, String[] words) {

        // build trie
        for(String word: words) {
            TrieNode node = root;
            for(int i = 0; i < word.length(); i++) {
                char ch = word.charAt(i);
                if(!node.children.containsKey(ch)) {
                    TrieNode newNode = new TrieNode();
                    node.children.put(ch, newNode);
                    node = newNode;
                } else{
                    node = node.children.get(ch);
                }
            }
            node.word = word;
        }
        
        // backtracking starting for each cell in the board
        for(int i = 0; i < board.length; i++) {
            for(int j = 0; j < board[0].length; j++) {
                if(root.children.containsKey(board[i][j])) {
                    backtrack(board, root, i, j);
                }
            }
        }
        
        return res;
    }
    
    private void backtrack(char[][] board, TrieNode parent, int row, int col) {
        char ch = board[row][col];
        TrieNode curNode = parent.children.get(ch);
        
        if(curNode.word != null) {
            res.add(curNode.word);
            curNode.word = null; // avoid duplication- e.g [[a,o][o, o]], ["ao"]valid test case wont contain dup words in the list, but dup ao will be added to res list
        }

        board[row][col] = '#'; // mark visited
        
        // check all adjacent cells, try to traverse all the possible paths in the trie tree based on current node/parent(1st level children of root)
        int[][] dxy = {{-1, 0},{1, 0},{0, -1},{0, 1}};
        for(int d = 0; d < dxy.length; d++) {
            int x = row + dxy[d][0];
            int y = col + dxy[d][1];
            
            if (x < 0 || x >= board.length || y < 0 || y >= board[0].length) {
                continue;
            }
            if(curNode.children.containsKey(board[x][y])) {
                backtrack(board, curNode, x, y);
            }
        }
        
        board[row][col] = ch; // backtrack
        
        // Optimization: incrementally remove the leaf nodes
        // just remove all the branches ever traversed to avoid traverse again - why we may traverse again?
        // because there may be dup pattern on board  [[a,a],[a, a],[a, a],[a, a],[a, a]], wordList = ["aa"]
        // in this case, we have "curNode.word = null;" to avoid add dup word to result. But did not avoid traverse dup path. here we need it.
        if (curNode.children.isEmpty()) {
          parent.children.remove(ch);
        }
    }
}

class TrieNode {
    Map<Character, TrieNode> children;
    String word;
    
    public TrieNode(){
        children = new HashMap<>();
        word = null;
    }
}
/*
class Solution {
    boolean[][] visited;
    int[][] dxy = {{-1, 0},{1, 0},{0, -1},{0, 1}};
    public List<String> findWords(char[][] board, String[] words) {
        List<String> res = new ArrayList<>();
        visited = new boolean[board.length][board[0].length];
        
        boolean nextFlag = false;
        for(String word: words) {
            for(int i = 0; i < board.length; i++) {
                for(int j = 0; j < board[0].length; j++) {
                    if(board[i][j] == word.charAt(0)) {
                        if(dfs(board, word, i, j, 0)) {
                            res.add(word);
                            nextFlag = true;
                            break;
                        }
                    }
                }
                if(nextFlag) {
                    nextFlag = false;
                    break;
                }
            }
        }
        
        return res;
    }
    
    private boolean dfs(char[][] board, String word, int row, int col, int index) {
        
        if(index == word.length()) {
            return true;
        }
        
        if(row < 0 || row >= board.length || col < 0 || col >= board[0].length || visited[row][col] || board[row][col] != word.charAt(index)) {
            return false;
        }
        
        visited[row][col] = true;
        for(int d = 0; d < dxy.length; d++) {
            int x = row + dxy[d][0];
            int y = col + dxy[d][1];
            
            if(dfs(board, word, x, y, index + 1)) {
                visited[row][col] = false;
                return true;
            }
            
        }
        visited[row][col] = false;
        
        return false;
    }
}
*/