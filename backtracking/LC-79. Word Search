// backtrack
// try start at/from each cell that value is same as word.charAt(0)) and see which one can achieve the word
// once reach to the word, then no need to continue anymore, just stop
// each time from a cell, there are 4 possible paths, could move to up, down, left, right 4 different directions
// once current path does not work, then need to backtracking, since other path could use it later
// tc: 4^mn
// sc: mn for visited, and mn for recursion call stack
class Solution {
    int[][] dxy = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
    boolean[][] visited;
    public boolean exist(char[][] board, String word) {
        int m = board.length;
        int n = board[0].length;
        
        visited = new boolean[m][n];
        boolean res = false;
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                // try start at/from each cell that value is same as word.charAt(0)) and see which one can achieve the word
                if(board[i][j] == word.charAt(0)) {
                    res = dfs(board, word, 0, i, j, m, n);
                    // once reach to the word, then no need to continue anymore, just stop
                    if(res) return true;
                }
            }
        }
        
        return false;
    }
    
    private boolean dfs(char[][] board, String word, int index, int row, int col, int m, int n) {
        if(index == word.length()) return true;
        
        
        if(row >= 0 && row < m && col >= 0 && col < n && visited[row][col] == false && board[row][col] == word.charAt(index)) {
            visited[row][col] = true;
            boolean res = false;
            // each time from a cell, there are 4 possible paths, could move to up, down, left, right 4 different directions
            for(int d = 0; d < dxy.length; d++) {
                int x = row + dxy[d][0];
                int y = col + dxy[d][1];
                
                // once reach to the word, then no need to continue anymore, just stop
                res = dfs(board, word, index + 1, x, y, m, n);
                if(res) return true;
            }
            visited[row][col] = false; // once current path does not work, then need to backtracking, since other path could use it later
        }
        
        return false;
    }
}