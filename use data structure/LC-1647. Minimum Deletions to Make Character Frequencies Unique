// #1 use a map to count the occurance of each char
// #2 traverse the map
// #3 use set to store/track the frequency during #2 traverse - if there is a duplicate frequency, then reduce one by one(to get min removal, have to try one by one)
// #4 count the removal during #2 and #3
// tc: n + m, the whole removal process worst case is n in all(remove whole s, it is not an n^2)
// sc: n + n
class Solution {
    public int minDeletions(String s) {
        Map<Character, Integer> countMap = new HashMap<>();
        Set<Integer> set = new HashSet<>();
        int count = 0;
        
       // #1 use a map to count the occurance of each char
        for(char ch: s.toCharArray()){
            countMap.put(ch, countMap.getOrDefault(ch, 0) + 1);
        }
        
        // #2 traverse the map
        for(Map.Entry<Character, Integer> pair: countMap.entrySet()) {
            // #3 use set to store/track the frequency
            if(!set.contains(pair.getValue())) { // if no duplicate then add the set
                set.add(pair.getValue());
            } else { // if there is duplicate, try to remove until no dupliate(or remove all the char)
                int i = pair.getValue();
                while(i > 0) {
                    if(!set.contains(i)) {
                        set.add(i);
                        break;
                    }
                    count++;
                    i--;
                }
            }
            
        }
        
        return count;
    }
}
// this solution is exactly same logic as above, but much faster since map operation is slower than native int[]
// #1 use a map to count the occurance of each char
// #2 traverse the map
// #3 use set to store/track the frequency during #2 traverse - if there is a duplicate frequency, then reduce one by one(to get min removal, have to try one by one) - Decrement Each Duplicate Until it is Unique
// #4 count the removal during #2 and #3
// tc: n + n the whole removal process worst case is n in all(remove whole s, it is not an n^2)
// sc: n + n
class Solution {
    public int minDeletions(String s) {
        int[] frequency = new int[26];
        Set<Integer> set = new HashSet<>();
        int count = 0;
        
       // #1 use a map to count the occurance of each char
        for (int i = 0; i < s.length(); i++) {
            frequency[s.charAt(i) - 'a']++;
        }
        
        // #2 traverse the map
        for (int i = 0; i < 26; i++) {
            // #3 use set to store/track the frequency
            if(!set.contains(frequency[i])) { // if no duplicate then add the set
                set.add(frequency[i]);
            } else { // if there is duplicate, try to remove until no dupliate(or remove all the char)
                int fre = frequency[i];
                while(fre > 0) {
                    if(!set.contains(fre)) {
                        set.add(fre);
                        break;
                    }
                    count++;
                    fre--;
                }
            }
            
        }
        
        return count;
    }
}

// tc: n + klogk + k*klogk
class Solution {
    public int minDeletions(String s) {
        // Store the frequency of each character
        int[] frequency = new int[26];
        for (int i = 0; i < s.length(); i++) {
            frequency[s.charAt(i) - 'a']++;
        }
        
        // Add the frequencies to the priority queue
        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());
        for (int i = 0; i < 26; i++) {
            if (frequency[i] > 0) {
                pq.add(frequency[i]);
            }
        }
        
        int deleteCount = 0;
        while (pq.size() > 1) {
            int topElement  = pq.remove();
            
            // If the top two elements in the priority queue are the same
            if (topElement == pq.peek()) {
                // Decrement the popped value and push it back into the queue
                if (topElement - 1 > 0) {
                    pq.add(topElement - 1);
                }
                deleteCount++;
            }
        }
        
        return deleteCount;
    }
}
// from official solution - very elegent 
class Solution {
    public int minDeletions(String s) {
        // Store the frequency of each character
        int[] frequency = new int[26];
        for (int i = 0; i < s.length(); i++) {
            frequency[s.charAt(i) - 'a']++;
        }
        
        Arrays.sort(frequency);
        
        int deleteCount = 0;
        // Maximum frequency the current character can have
        int maxFreqAllowed = s.length();
        
        // Iterate over the frequencies in descending order
        for (int i = 25; i >= 0 && frequency[i] > 0; i--) {
            // Delete characters to make the frequency equal the maximum frequency allowed
            if (frequency[i] > maxFreqAllowed) {
                deleteCount += frequency[i] - maxFreqAllowed;
                frequency[i] = maxFreqAllowed;
            }
            // Update the maximum allowed frequency
            maxFreqAllowed = Math.max(0, frequency[i] - 1);
        }
        
        return deleteCount;
    }     
}