//tc: nlogn + nlogn
class Solution {
    public int[] getOrder(int[][] tasks) {
        PriorityQueue<Task> pq = new PriorityQueue<>((a, b) -> a.time[0] - b.time[0]);
        int curTime = 1;
        int[] res = new int[tasks.length];
        int index = 0;
        for(int i = 0; i < tasks.length; i++) {
            pq.add(new Task(i, tasks[i]));
        }
        
        PriorityQueue<Task> pq2 = new PriorityQueue<>( new Comparator<Task>() {
            public int compare(Task a, Task b) {
                if(a.time[1] == b.time[1]) {
                    return a.index - b.index;
                } else{
                    return a.time[1] - b.time[1];
                }
            }
        });
        while(!pq.isEmpty()) {
            //this is only for if there is a gap - e.g curTime is 1, but next earliest job is 5. do this when do job to do, and need a job to do.
            //when do this, need to make sure no job left in pq2, if there is job to do, no need to bump.
            if(curTime < pq.peek().time[0] && pq2.size() == 0) { 
                curTime = pq.peek().time[0];
            }
            while(pq.size() > 0 && curTime >= pq.peek().time[0]) {
                pq2.add(pq.poll());
            }
            
            Task t = pq2.poll();
            res[index] = t.index;
            index++;
          
            curTime = curTime + t.time[1];
            
        }
        
        while(pq2.size() > 0) {
            Task t = pq2.poll();
            res[index] = t.index;
            index++;
        }
        return res;
    }
}

class Task{
    int index;
    int[] time;
    
    public Task(int index, int[] time) {
        this.index = index;
        this.time = time;
    }
}